{"file":"/home/ferran/uni/computacio/nozoma-fork/src/contexts/backoffice/commerces/__mocks__/CommerceRepository.mock.ts","mappings":";;AAMA,MAAqB,sBAAsB;IAA3C;QAEa,iBAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACzB,oBAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC5B,aAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IA2ClC,CAAC;IAzCG,WAAW,CAAC,KAAc;QACtB,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,6BAA6B,CAAC,KAAc;QACxC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;aACvB,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,yBAAyB,CAAC,QAA4B;QAClD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED,QAAQ,CAAC,EAAU;QACf,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,wBAAwB,CAAC,EAAU;QAC/B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;aACpB,oBAAoB,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,sBAAsB,CAAC,QAA4B;QAC/C,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,CAAC,QAAkB;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,sBAAsB,CAAC,QAAkB;QACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aAChB,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,qBAAqB;QACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;aAChB,GAAG;aACH,gBAAgB,EAAE,CAAC;IAC5B,CAAC;CAEJ;AA/CD,yCA+CC","names":[],"sources":["/home/ferran/uni/computacio/nozoma-fork/src/contexts/backoffice/commerces/__mocks__/CommerceRepository.mock.ts"],"sourcesContent":["import { CommerceRepository } from '@backoffice-contexts/commerces/domain/CommerceRepository';\nimport EmailVo from '@shared/domain/EmailVo';\nimport { Nullable } from '@shared/domain/Nullable';\nimport Commerce from '@backoffice-contexts/commerces/domain/Commerce';\nimport UuidVo from '@shared/domain/UuidVo';\n\nexport default class CommerceRepositoryMock implements CommerceRepository {\n\n    readonly findByIdMock = jest.fn();\n    readonly findByEmailMock = jest.fn();\n    readonly saveMock = jest.fn();\n\n    findByEmail(email: EmailVo): Promise<Nullable<Commerce>> {\n        return this.findByEmailMock(email);\n    }\n\n    assertFindByEmailIsCalledWith(email: EmailVo): void {\n        expect(this.findByEmailMock)\n            .toHaveBeenCalledWith(email);\n    }\n\n    whenFindByEmailThenReturn(commerce: Nullable<Commerce>): void {\n        this.findByEmailMock.mockResolvedValue(commerce);\n    }\n\n    findById(id: UuidVo): Promise<Nullable<Commerce>> {\n        return this.findByIdMock(id);\n    }\n\n    assertFindIdIsCalledWith(id: UuidVo): void {\n        expect(this.findByIdMock)\n            .toHaveBeenCalledWith(id);\n    }\n\n    whenFindByIdThenReturn(commerce: Nullable<Commerce>): void {\n        this.findByIdMock.mockResolvedValue(commerce);\n    }\n\n    save(commerce: Commerce): Promise<void> {\n        return this.saveMock(commerce);\n    }\n\n    assertSaveIsCalledWith(commerce: Commerce): void {\n        expect(this.saveMock)\n            .toHaveBeenCalledWith(commerce);\n    }\n\n    assertSaveIsNotCalled(): void {\n        expect(this.saveMock)\n            .not\n            .toHaveBeenCalled();\n    }\n\n}\n"],"version":3}