2a33d8efcddb228b5854c438d4d3624d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CommerceRepositoryMock {
    constructor() {
        this.findByIdMock = jest.fn();
        this.findByEmailMock = jest.fn();
        this.saveMock = jest.fn();
    }
    findByEmail(email) {
        return this.findByEmailMock(email);
    }
    assertFindByEmailIsCalledWith(email) {
        expect(this.findByEmailMock)
            .toHaveBeenCalledWith(email);
    }
    whenFindByEmailThenReturn(commerce) {
        this.findByEmailMock.mockResolvedValue(commerce);
    }
    findById(id) {
        return this.findByIdMock(id);
    }
    assertFindIdIsCalledWith(id) {
        expect(this.findByIdMock)
            .toHaveBeenCalledWith(id);
    }
    whenFindByIdThenReturn(commerce) {
        this.findByIdMock.mockResolvedValue(commerce);
    }
    save(commerce) {
        return this.saveMock(commerce);
    }
    assertSaveIsCalledWith(commerce) {
        expect(this.saveMock)
            .toHaveBeenCalledWith(commerce);
    }
    assertSaveIsNotCalled() {
        expect(this.saveMock)
            .not
            .toHaveBeenCalled();
    }
}
exports.default = CommerceRepositoryMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZmVycmFuL3VuaS9jb21wdXRhY2lvL25vem9tYS1mb3JrL3NyYy9jb250ZXh0cy9iYWNrb2ZmaWNlL2NvbW1lcmNlcy9fX21vY2tzX18vQ29tbWVyY2VSZXBvc2l0b3J5Lm1vY2sudHMiLCJtYXBwaW5ncyI6Ijs7QUFNQSxNQUFxQixzQkFBc0I7SUFBM0M7UUFFYSxpQkFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN6QixvQkFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QixhQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBMkNsQyxDQUFDO0lBekNHLFdBQVcsQ0FBQyxLQUFjO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsNkJBQTZCLENBQUMsS0FBYztRQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQzthQUN2QixvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQseUJBQXlCLENBQUMsUUFBNEI7UUFDbEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELHdCQUF3QixDQUFDLEVBQVU7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDcEIsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELHNCQUFzQixDQUFDLFFBQTRCO1FBQy9DLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksQ0FBQyxRQUFrQjtRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHNCQUFzQixDQUFDLFFBQWtCO1FBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ2hCLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDaEIsR0FBRzthQUNILGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztDQUVKO0FBL0NELHlDQStDQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9mZXJyYW4vdW5pL2NvbXB1dGFjaW8vbm96b21hLWZvcmsvc3JjL2NvbnRleHRzL2JhY2tvZmZpY2UvY29tbWVyY2VzL19fbW9ja3NfXy9Db21tZXJjZVJlcG9zaXRvcnkubW9jay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tZXJjZVJlcG9zaXRvcnkgfSBmcm9tICdAYmFja29mZmljZS1jb250ZXh0cy9jb21tZXJjZXMvZG9tYWluL0NvbW1lcmNlUmVwb3NpdG9yeSc7XG5pbXBvcnQgRW1haWxWbyBmcm9tICdAc2hhcmVkL2RvbWFpbi9FbWFpbFZvJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnQHNoYXJlZC9kb21haW4vTnVsbGFibGUnO1xuaW1wb3J0IENvbW1lcmNlIGZyb20gJ0BiYWNrb2ZmaWNlLWNvbnRleHRzL2NvbW1lcmNlcy9kb21haW4vQ29tbWVyY2UnO1xuaW1wb3J0IFV1aWRWbyBmcm9tICdAc2hhcmVkL2RvbWFpbi9VdWlkVm8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tZXJjZVJlcG9zaXRvcnlNb2NrIGltcGxlbWVudHMgQ29tbWVyY2VSZXBvc2l0b3J5IHtcblxuICAgIHJlYWRvbmx5IGZpbmRCeUlkTW9jayA9IGplc3QuZm4oKTtcbiAgICByZWFkb25seSBmaW5kQnlFbWFpbE1vY2sgPSBqZXN0LmZuKCk7XG4gICAgcmVhZG9ubHkgc2F2ZU1vY2sgPSBqZXN0LmZuKCk7XG5cbiAgICBmaW5kQnlFbWFpbChlbWFpbDogRW1haWxWbyk6IFByb21pc2U8TnVsbGFibGU8Q29tbWVyY2U+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRCeUVtYWlsTW9jayhlbWFpbCk7XG4gICAgfVxuXG4gICAgYXNzZXJ0RmluZEJ5RW1haWxJc0NhbGxlZFdpdGgoZW1haWw6IEVtYWlsVm8pOiB2b2lkIHtcbiAgICAgICAgZXhwZWN0KHRoaXMuZmluZEJ5RW1haWxNb2NrKVxuICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGVtYWlsKTtcbiAgICB9XG5cbiAgICB3aGVuRmluZEJ5RW1haWxUaGVuUmV0dXJuKGNvbW1lcmNlOiBOdWxsYWJsZTxDb21tZXJjZT4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5maW5kQnlFbWFpbE1vY2subW9ja1Jlc29sdmVkVmFsdWUoY29tbWVyY2UpO1xuICAgIH1cblxuICAgIGZpbmRCeUlkKGlkOiBVdWlkVm8pOiBQcm9taXNlPE51bGxhYmxlPENvbW1lcmNlPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kQnlJZE1vY2soaWQpO1xuICAgIH1cblxuICAgIGFzc2VydEZpbmRJZElzQ2FsbGVkV2l0aChpZDogVXVpZFZvKTogdm9pZCB7XG4gICAgICAgIGV4cGVjdCh0aGlzLmZpbmRCeUlkTW9jaylcbiAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkV2l0aChpZCk7XG4gICAgfVxuXG4gICAgd2hlbkZpbmRCeUlkVGhlblJldHVybihjb21tZXJjZTogTnVsbGFibGU8Q29tbWVyY2U+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZmluZEJ5SWRNb2NrLm1vY2tSZXNvbHZlZFZhbHVlKGNvbW1lcmNlKTtcbiAgICB9XG5cbiAgICBzYXZlKGNvbW1lcmNlOiBDb21tZXJjZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zYXZlTW9jayhjb21tZXJjZSk7XG4gICAgfVxuXG4gICAgYXNzZXJ0U2F2ZUlzQ2FsbGVkV2l0aChjb21tZXJjZTogQ29tbWVyY2UpOiB2b2lkIHtcbiAgICAgICAgZXhwZWN0KHRoaXMuc2F2ZU1vY2spXG4gICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFdpdGgoY29tbWVyY2UpO1xuICAgIH1cblxuICAgIGFzc2VydFNhdmVJc05vdENhbGxlZCgpOiB2b2lkIHtcbiAgICAgICAgZXhwZWN0KHRoaXMuc2F2ZU1vY2spXG4gICAgICAgICAgICAubm90XG4gICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH1cblxufVxuIl0sInZlcnNpb24iOjN9