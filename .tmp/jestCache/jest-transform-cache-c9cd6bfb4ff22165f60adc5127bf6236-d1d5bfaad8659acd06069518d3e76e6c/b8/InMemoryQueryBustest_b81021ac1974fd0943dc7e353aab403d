3e9f880c63732f292d02660775794586
"use strict";
/* eslint-disable class-methods-use-this */
/* eslint-disable max-classes-per-file */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InMemoryQueryBus_1 = __importDefault(require("@shared/infra/bus/query/InMemoryQueryBus"));
const QueryNotRegisteredError_1 = __importDefault(require("@shared/domain/bus/query/QueryNotRegisteredError"));
const QueryHandlersInformation_1 = __importDefault(require("@shared/infra/bus/query/QueryHandlersInformation"));
class UnhandledQuery {
}
UnhandledQuery.QUERY_NAME = "unhandled.query";
class HandledQuery {
}
HandledQuery.QUERY_NAME = "handled.query";
class MyQueryHandler {
    subscribedTo() {
        return HandledQuery;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async handle(_query) {
        return {};
    }
}
describe("inMemoryQueryBus", () => {
    it("throws an error if dispatches a query without handler", async () => {
        expect.hasAssertions();
        const unhandledQuery = new UnhandledQuery(), queryHandlersInformation = new QueryHandlersInformation_1.default([]), queryBus = new InMemoryQueryBus_1.default(queryHandlersInformation);
        let exception = null;
        try {
            await queryBus.ask(unhandledQuery);
        }
        catch (error) {
            exception = error;
        }
        expect(exception)
            .toBeInstanceOf(QueryNotRegisteredError_1.default);
    });
    // eslint-disable-next-line jest/prefer-expect-assertions,jest/expect-expect
    it("accepts a query with handler", async () => {
        const handledQuery = new HandledQuery(), myQueryHandler = new MyQueryHandler(), queryHandlersInformation = new QueryHandlersInformation_1.default([
            myQueryHandler
        ]), queryBus = new InMemoryQueryBus_1.default(queryHandlersInformation);
        await queryBus.ask(handledQuery);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZmVycmFuL3VuaS9jb21wdXRhY2lvL25vem9tYS1mb3JrL3NyYy9jb250ZXh0cy9zaGFyZWQvaW5mcmEvYnVzL3F1ZXJ5L0luTWVtb3J5UXVlcnlCdXMudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUEsMkNBQTJDO0FBQzNDLHlDQUF5Qzs7Ozs7QUFLekMsZ0dBQXdFO0FBQ3hFLCtHQUF1RjtBQUN2RixnSEFBd0Y7QUFFeEYsTUFBTSxjQUFjOztBQUNYLHlCQUFVLEdBQUcsaUJBQWlCLENBQUM7QUFHeEMsTUFBTSxZQUFZOztBQUNULHVCQUFVLEdBQUcsZUFBZSxDQUFDO0FBR3RDLE1BQU0sY0FBYztJQUNoQixZQUFZO1FBQ1IsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztJQUVELDZEQUE2RDtJQUM3RCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQW9CO1FBQzdCLE9BQU8sRUFBd0IsQ0FBQztJQUNwQyxDQUFDO0NBQ0o7QUFFRCxRQUFRLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLEVBQUUsQ0FBQyx1REFBdUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRSxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFdkIsTUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLEVBQUUsRUFDdkMsd0JBQXdCLEdBQUcsSUFBSSxrQ0FBd0IsQ0FBQyxFQUFFLENBQUMsRUFDM0QsUUFBUSxHQUFHLElBQUksMEJBQWdCLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUU5RCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSTtZQUNBLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN0QztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osU0FBUyxHQUFHLEtBQUssQ0FBQztTQUNyQjtRQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7YUFDWixjQUFjLENBQUMsaUNBQXVCLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILDRFQUE0RTtJQUM1RSxFQUFFLENBQUMsOEJBQThCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsRUFDbkMsY0FBYyxHQUFHLElBQUksY0FBYyxFQUFFLEVBQ3JDLHdCQUF3QixHQUFHLElBQUksa0NBQXdCLENBQUM7WUFDcEQsY0FBYztTQUNqQixDQUFDLEVBQ0YsUUFBUSxHQUFHLElBQUksMEJBQWdCLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUU5RCxNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9mZXJyYW4vdW5pL2NvbXB1dGFjaW8vbm96b21hLWZvcmsvc3JjL2NvbnRleHRzL3NoYXJlZC9pbmZyYS9idXMvcXVlcnkvSW5NZW1vcnlRdWVyeUJ1cy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXG5cbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSBcIkBzaGFyZWQvZG9tYWluL2J1cy9xdWVyeS9RdWVyeVwiO1xuaW1wb3J0IHsgUXVlcnlIYW5kbGVyIH0gZnJvbSBcIkBzaGFyZWQvZG9tYWluL2J1cy9xdWVyeS9RdWVyeUhhbmRsZXJcIjtcbmltcG9ydCBRdWVyeVJlc3BvbnNlIGZyb20gXCJAc2hhcmVkL2RvbWFpbi9idXMvcXVlcnkvUXVlcnlSZXNwb25zZVwiO1xuaW1wb3J0IEluTWVtb3J5UXVlcnlCdXMgZnJvbSBcIkBzaGFyZWQvaW5mcmEvYnVzL3F1ZXJ5L0luTWVtb3J5UXVlcnlCdXNcIjtcbmltcG9ydCBRdWVyeU5vdFJlZ2lzdGVyZWRFcnJvciBmcm9tIFwiQHNoYXJlZC9kb21haW4vYnVzL3F1ZXJ5L1F1ZXJ5Tm90UmVnaXN0ZXJlZEVycm9yXCI7XG5pbXBvcnQgUXVlcnlIYW5kbGVyc0luZm9ybWF0aW9uIGZyb20gXCJAc2hhcmVkL2luZnJhL2J1cy9xdWVyeS9RdWVyeUhhbmRsZXJzSW5mb3JtYXRpb25cIjtcblxuY2xhc3MgVW5oYW5kbGVkUXVlcnkgaW1wbGVtZW50cyBRdWVyeSB7XG4gIHN0YXRpYyBRVUVSWV9OQU1FID0gXCJ1bmhhbmRsZWQucXVlcnlcIjtcbn1cblxuY2xhc3MgSGFuZGxlZFF1ZXJ5IGltcGxlbWVudHMgUXVlcnkge1xuICBzdGF0aWMgUVVFUllfTkFNRSA9IFwiaGFuZGxlZC5xdWVyeVwiO1xufVxuXG5jbGFzcyBNeVF1ZXJ5SGFuZGxlciBpbXBsZW1lbnRzIFF1ZXJ5SGFuZGxlcjxRdWVyeSwgUXVlcnlSZXNwb25zZTxhbnk+PiB7XG4gICAgc3Vic2NyaWJlZFRvKCk6IEhhbmRsZWRRdWVyeSB7XG4gICAgICAgIHJldHVybiBIYW5kbGVkUXVlcnk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGFzeW5jIGhhbmRsZShfcXVlcnk6IEhhbmRsZWRRdWVyeSk6IFByb21pc2U8UXVlcnlSZXNwb25zZTxhbnk+PiB7XG4gICAgICAgIHJldHVybiB7fSBhcyBRdWVyeVJlc3BvbnNlPGFueT47XG4gICAgfVxufVxuXG5kZXNjcmliZShcImluTWVtb3J5UXVlcnlCdXNcIiwgKCkgPT4ge1xuICAgIGl0KFwidGhyb3dzIGFuIGVycm9yIGlmIGRpc3BhdGNoZXMgYSBxdWVyeSB3aXRob3V0IGhhbmRsZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBleHBlY3QuaGFzQXNzZXJ0aW9ucygpO1xuXG4gICAgICAgIGNvbnN0IHVuaGFuZGxlZFF1ZXJ5ID0gbmV3IFVuaGFuZGxlZFF1ZXJ5KCksXG4gICAgICAgICAgICBxdWVyeUhhbmRsZXJzSW5mb3JtYXRpb24gPSBuZXcgUXVlcnlIYW5kbGVyc0luZm9ybWF0aW9uKFtdKSxcbiAgICAgICAgICAgIHF1ZXJ5QnVzID0gbmV3IEluTWVtb3J5UXVlcnlCdXMocXVlcnlIYW5kbGVyc0luZm9ybWF0aW9uKTtcblxuICAgICAgICBsZXQgZXhjZXB0aW9uID0gbnVsbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcXVlcnlCdXMuYXNrKHVuaGFuZGxlZFF1ZXJ5KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbiA9IGVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwZWN0KGV4Y2VwdGlvbilcbiAgICAgICAgICAgIC50b0JlSW5zdGFuY2VPZihRdWVyeU5vdFJlZ2lzdGVyZWRFcnJvcik7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgamVzdC9wcmVmZXItZXhwZWN0LWFzc2VydGlvbnMsamVzdC9leHBlY3QtZXhwZWN0XG4gICAgaXQoXCJhY2NlcHRzIGEgcXVlcnkgd2l0aCBoYW5kbGVyXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlZFF1ZXJ5ID0gbmV3IEhhbmRsZWRRdWVyeSgpLFxuICAgICAgICAgICAgbXlRdWVyeUhhbmRsZXIgPSBuZXcgTXlRdWVyeUhhbmRsZXIoKSxcbiAgICAgICAgICAgIHF1ZXJ5SGFuZGxlcnNJbmZvcm1hdGlvbiA9IG5ldyBRdWVyeUhhbmRsZXJzSW5mb3JtYXRpb24oW1xuICAgICAgICAgICAgICAgIG15UXVlcnlIYW5kbGVyXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHF1ZXJ5QnVzID0gbmV3IEluTWVtb3J5UXVlcnlCdXMocXVlcnlIYW5kbGVyc0luZm9ybWF0aW9uKTtcblxuICAgICAgICBhd2FpdCBxdWVyeUJ1cy5hc2soaGFuZGxlZFF1ZXJ5KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9