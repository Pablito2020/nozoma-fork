{"file":"/home/ferran/uni/computacio/nozoma-fork/src/contexts/shared/infra/bus/query/InMemoryQueryBus.test.ts","mappings":";AAAA,2CAA2C;AAC3C,yCAAyC;;;;;AAKzC,gGAAwE;AACxE,+GAAuF;AACvF,gHAAwF;AAExF,MAAM,cAAc;;AACX,yBAAU,GAAG,iBAAiB,CAAC;AAGxC,MAAM,YAAY;;AACT,uBAAU,GAAG,eAAe,CAAC;AAGtC,MAAM,cAAc;IAChB,YAAY;QACR,OAAO,YAAY,CAAC;IACxB,CAAC;IAED,6DAA6D;IAC7D,KAAK,CAAC,MAAM,CAAC,MAAoB;QAC7B,OAAO,EAAwB,CAAC;IACpC,CAAC;CACJ;AAED,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,CAAC,aAAa,EAAE,CAAC;QAEvB,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,EACvC,wBAAwB,GAAG,IAAI,kCAAwB,CAAC,EAAE,CAAC,EAC3D,QAAQ,GAAG,IAAI,0BAAgB,CAAC,wBAAwB,CAAC,CAAC;QAE9D,IAAI,SAAS,GAAG,IAAI,CAAC;QAErB,IAAI;YACA,MAAM,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SACtC;QAAC,OAAO,KAAK,EAAE;YACZ,SAAS,GAAG,KAAK,CAAC;SACrB;QAED,MAAM,CAAC,SAAS,CAAC;aACZ,cAAc,CAAC,iCAAuB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,4EAA4E;IAC5E,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,EACnC,cAAc,GAAG,IAAI,cAAc,EAAE,EACrC,wBAAwB,GAAG,IAAI,kCAAwB,CAAC;YACpD,cAAc;SACjB,CAAC,EACF,QAAQ,GAAG,IAAI,0BAAgB,CAAC,wBAAwB,CAAC,CAAC;QAE9D,MAAM,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/home/ferran/uni/computacio/nozoma-fork/src/contexts/shared/infra/bus/query/InMemoryQueryBus.test.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\n\nimport { Query } from \"@shared/domain/bus/query/Query\";\nimport { QueryHandler } from \"@shared/domain/bus/query/QueryHandler\";\nimport QueryResponse from \"@shared/domain/bus/query/QueryResponse\";\nimport InMemoryQueryBus from \"@shared/infra/bus/query/InMemoryQueryBus\";\nimport QueryNotRegisteredError from \"@shared/domain/bus/query/QueryNotRegisteredError\";\nimport QueryHandlersInformation from \"@shared/infra/bus/query/QueryHandlersInformation\";\n\nclass UnhandledQuery implements Query {\n  static QUERY_NAME = \"unhandled.query\";\n}\n\nclass HandledQuery implements Query {\n  static QUERY_NAME = \"handled.query\";\n}\n\nclass MyQueryHandler implements QueryHandler<Query, QueryResponse<any>> {\n    subscribedTo(): HandledQuery {\n        return HandledQuery;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async handle(_query: HandledQuery): Promise<QueryResponse<any>> {\n        return {} as QueryResponse<any>;\n    }\n}\n\ndescribe(\"inMemoryQueryBus\", () => {\n    it(\"throws an error if dispatches a query without handler\", async () => {\n        expect.hasAssertions();\n\n        const unhandledQuery = new UnhandledQuery(),\n            queryHandlersInformation = new QueryHandlersInformation([]),\n            queryBus = new InMemoryQueryBus(queryHandlersInformation);\n\n        let exception = null;\n\n        try {\n            await queryBus.ask(unhandledQuery);\n        } catch (error) {\n            exception = error;\n        }\n\n        expect(exception)\n            .toBeInstanceOf(QueryNotRegisteredError);\n    });\n\n    // eslint-disable-next-line jest/prefer-expect-assertions,jest/expect-expect\n    it(\"accepts a query with handler\", async () => {\n        const handledQuery = new HandledQuery(),\n            myQueryHandler = new MyQueryHandler(),\n            queryHandlersInformation = new QueryHandlersInformation([\n                myQueryHandler\n            ]),\n            queryBus = new InMemoryQueryBus(queryHandlersInformation);\n\n        await queryBus.ask(handledQuery);\n    });\n});\n"],"version":3}