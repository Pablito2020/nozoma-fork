{"file":"/home/ferran/uni/computacio/nozoma-fork/src/contexts/shared/__mocks__/EventBus.mock.ts","mappings":";AAAA,8CAA8C;;;;;;;;;;;;;AAM9C,MAAqB,YAAY;IAAjC;QACY,eAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAoEnC,CAAC;IAlEW,MAAM,CAAC,sBAAsB,CAAC,KAAkB;QACpD,MAAM;QACF,6DAA6D;QAC7D,OAAO;QACP,6DAA6D;QAC7D,UAAU,KAEV,KAAK,EADF,UAAU,UACb,KAAK,EANH,yBAML,CAAQ,CAAC;QAEV,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAqB;QAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAED,oFAAoF;IACpF,cAAc,CAAC,YAAkD;QAC7D,EAAE;IACN,CAAC;IAED,0BAA0B,CAAC,aAA0B;QACjD,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAC9C,kBAAkB,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,EAChE,kBAAkB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAElD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;aACzB,eAAe,CAAC,CAAC,CAAC,CAAC;QAExB,MAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;aACrD,aAAa,CAAC,YAAY,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAChF,CAAC;IAED,4BAA4B,CAAC,MAAqB;QAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAC9C,kBAAkB,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,EAChE,mBAAmB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAEhD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;aACzB,eAAe,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,mBAAmB,CAAC;aACtB,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAEjC,mBAAmB,CAAC,OAAO,CAAC,CAAC,cAA2B,EAAE,CAAS,EAAE,EAAE;YACnE,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEhC,MAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;iBACrD,aAAa,CAAC,YAAY,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oBAAoB;QAChB,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAC9C,kBAAkB,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,EAChE,mBAAmB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAEhD,MAAM,CAAC,mBAAmB,CAAC;aACtB,YAAY,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAED,sBAAsB;QAClB,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;QAEnD,MAAM,CAAC,eAAe,CAAC;aAClB,YAAY,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;CACJ;AArED,+BAqEC","names":[],"sources":["/home/ferran/uni/computacio/nozoma-fork/src/contexts/shared/__mocks__/EventBus.mock.ts"],"sourcesContent":["/* eslint-disable jest/no-standalone-expect */\n\nimport { EventBus } from '@shared/domain/bus/event/EventBus';\nimport { DomainEvent } from '@shared/domain/bus/event/DomainEvent';\nimport { DomainEventSubscriber } from '@shared/domain/bus/event/DomainEventSubscriber';\n\nexport default class EventBusMock implements EventBus {\n    private publishSpy = jest.fn();\n\n    private static getDataFromDomainEvent(event: DomainEvent): any {\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            eventId,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            occurredOn,\n            ...attributes\n        } = event;\n\n        return attributes;\n    }\n\n    async publish(events: DomainEvent[]): Promise<void> {\n        this.publishSpy(events);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars,class-methods-use-this\n    addSubscribers(_subscribers: DomainEventSubscriber<DomainEvent>[]): void {\n        //\n    }\n\n    assertLastPublishedEventIs(expectedEvent: DomainEvent): void {\n        const publishSpyCalls = this.publishSpy.mock.calls,\n            lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvent = lastPublishSpyCall[0][0];\n\n        expect(publishSpyCalls.length)\n            .toBeGreaterThan(0);\n\n        expect(EventBusMock.getDataFromDomainEvent(expectedEvent))\n            .toMatchObject(EventBusMock.getDataFromDomainEvent(lastPublishedEvent));\n    }\n\n    assertLastPublishedEventsAre(events: DomainEvent[]): void {\n        const publishSpyCalls = this.publishSpy.mock.calls,\n            lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvents = lastPublishSpyCall[0];\n\n        expect(publishSpyCalls.length)\n            .toBeGreaterThan(0);\n        expect(lastPublishedEvents)\n            .toHaveLength(events.length);\n\n        lastPublishedEvents.forEach((publishedEvent: DomainEvent, i: number) => {\n            const expectedEvent = events[i];\n\n            expect(EventBusMock.getDataFromDomainEvent(expectedEvent))\n                .toMatchObject(EventBusMock.getDataFromDomainEvent(publishedEvent));\n        });\n    }\n\n    assertEmptyPublished(): void {\n        const publishSpyCalls = this.publishSpy.mock.calls,\n            lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvents = lastPublishSpyCall[0];\n\n        expect(lastPublishedEvents)\n            .toHaveLength(0);\n    }\n\n    assertNothingPublished(): void {\n        const publishSpyCalls = this.publishSpy.mock.calls;\n\n        expect(publishSpyCalls)\n            .toHaveLength(0);\n    }\n}\n"],"version":3}