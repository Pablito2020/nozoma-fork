e659e5b49dfea716689315ad2fda2221
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CommerceCreator_1 = __importDefault(require("@backoffice-contexts/commerces/app/create/CommerceCreator"));
const CommerceRepository_mock_1 = __importDefault(require("@backoffice-contexts/commerces/__mocks__/CommerceRepository.mock"));
const CommerceCreatorHandler_1 = __importDefault(require("@backoffice-contexts/commerces/app/create/CommerceCreatorHandler"));
const EventBus_mock_1 = __importDefault(require("@shared/__mocks__/EventBus.mock"));
const Commerce_mother_1 = __importDefault(require("@backoffice-contexts/commerces/mothers/Commerce.mother"));
const CreateCommerceCommand_mother_1 = __importDefault(require("@backoffice-contexts/commerces/mothers/CreateCommerceCommand.mother"));
const AlreadyExists_1 = __importDefault(require("@shared/domain/AlreadyExists"));
const CommerceCreatedEvent_mother_1 = __importDefault(require("@backoffice-contexts/commerces/mothers/CommerceCreatedEvent.mother"));
describe(CommerceCreator_1.default, () => {
    it('should throw AlreadyExists when commerce with same email already exists', async () => {
        const repo = new CommerceRepository_mock_1.default(), creator = new CommerceCreator_1.default(repo, new EventBus_mock_1.default()), handler = new CommerceCreatorHandler_1.default(creator), expected = Commerce_mother_1.default.random(), command = CreateCommerceCommand_mother_1.default.fromCommerce(expected);
        repo.whenFindByIdThenReturn(null);
        repo.whenFindByEmailThenReturn(expected);
        await expect(handler.handle(command))
            .rejects
            .toBeInstanceOf(AlreadyExists_1.default);
        repo.assertFindByEmailIsCalledWith(expected.email);
        repo.assertFindIdIsCalledWith(expected.id);
        repo.assertSaveIsNotCalled();
    });
    it('should fail when commerce with same email fail', async () => {
        const repo = new CommerceRepository_mock_1.default(), creator = new CommerceCreator_1.default(repo, new EventBus_mock_1.default()), handler = new CommerceCreatorHandler_1.default(creator), expected = Commerce_mother_1.default.random(), command = CreateCommerceCommand_mother_1.default.fromCommerce(expected);
        repo.whenFindByIdThenReturn(expected);
        repo.whenFindByEmailThenReturn(null);
        await expect(handler.handle(command))
            .rejects
            .toBeInstanceOf(AlreadyExists_1.default);
        repo.assertFindByEmailIsCalledWith(expected.email);
        repo.assertFindIdIsCalledWith(expected.id);
        repo.assertSaveIsNotCalled();
    });
    it('should create a new commerce', async () => {
        const repo = new CommerceRepository_mock_1.default(), creator = new CommerceCreator_1.default(repo, new EventBus_mock_1.default()), handler = new CommerceCreatorHandler_1.default(creator), expected = Commerce_mother_1.default.random(), command = CreateCommerceCommand_mother_1.default.fromCommerce(expected);
        repo.whenFindByIdThenReturn(null);
        repo.whenFindByEmailThenReturn(null);
        // eslint-disable-next-line one-var
        const response = await handler.handle(command);
        repo.assertFindByEmailIsCalledWith(expected.email);
        repo.assertFindIdIsCalledWith(expected.id);
        repo.assertSaveIsCalledWith(expected);
        expect(response.data)
            .toStrictEqual(expected);
    });
    it('should publish CommerceCreatedEvent', async () => {
        const repo = new CommerceRepository_mock_1.default(), eventBus = new EventBus_mock_1.default(), creator = new CommerceCreator_1.default(repo, eventBus), handler = new CommerceCreatorHandler_1.default(creator), commerce = Commerce_mother_1.default.random(), command = CreateCommerceCommand_mother_1.default.fromCommerce(commerce), expected = CommerceCreatedEvent_mother_1.default.fromCommerce(commerce);
        repo.whenFindByIdThenReturn(null);
        repo.whenFindByEmailThenReturn(null);
        await handler.handle(command);
        eventBus.assertLastPublishedEventIs(expected);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,