{"file":"/home/ferran/uni/computacio/nozoma-fork/src/contexts/backoffice/commerces/app/create/CommerceCreator.test.ts","mappings":"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","names":[],"sources":["/home/ferran/uni/computacio/nozoma-fork/src/contexts/backoffice/commerces/app/create/CommerceCreator.test.ts"],"sourcesContent":["import CommerceCreator from '@backoffice-contexts/commerces/app/create/CommerceCreator';\nimport CommerceRepositoryMock from '@backoffice-contexts/commerces/__mocks__/CommerceRepository.mock';\nimport CommerceCreatorHandler from '@backoffice-contexts/commerces/app/create/CommerceCreatorHandler';\nimport EventBusMock from '@shared/__mocks__/EventBus.mock';\nimport CommerceMother from '@backoffice-contexts/commerces/mothers/Commerce.mother';\nimport CreateCommerceCommandMother from '@backoffice-contexts/commerces/mothers/CreateCommerceCommand.mother';\nimport AlreadyExists from '@shared/domain/AlreadyExists';\nimport CommerceCreatedEventMother from '@backoffice-contexts/commerces/mothers/CommerceCreatedEvent.mother';\n\ndescribe(CommerceCreator, () => {\n    it('should throw AlreadyExists when commerce with same email already exists', async () => {\n        const repo = new CommerceRepositoryMock(),\n            creator = new CommerceCreator(repo, new EventBusMock()),\n            handler = new CommerceCreatorHandler(creator),\n            expected = CommerceMother.random(),\n            command = CreateCommerceCommandMother.fromCommerce(expected);\n\n        repo.whenFindByIdThenReturn(null);\n        repo.whenFindByEmailThenReturn(expected);\n\n        await expect(handler.handle(command))\n            .rejects\n            .toBeInstanceOf(AlreadyExists);\n\n        repo.assertFindByEmailIsCalledWith(expected.email);\n        repo.assertFindIdIsCalledWith(expected.id);\n        repo.assertSaveIsNotCalled();\n\n    });\n    it('should fail when commerce with same email fail', async () => {\n        const repo = new CommerceRepositoryMock(),\n            creator = new CommerceCreator(repo, new EventBusMock()),\n            handler = new CommerceCreatorHandler(creator),\n            expected = CommerceMother.random(),\n            command = CreateCommerceCommandMother.fromCommerce(expected);\n\n        repo.whenFindByIdThenReturn(expected);\n        repo.whenFindByEmailThenReturn(null);\n\n        await expect(handler.handle(command))\n            .rejects\n            .toBeInstanceOf(AlreadyExists);\n\n        repo.assertFindByEmailIsCalledWith(expected.email);\n        repo.assertFindIdIsCalledWith(expected.id);\n        repo.assertSaveIsNotCalled();\n    });\n    it('should create a new commerce', async () => {\n        const repo = new CommerceRepositoryMock(),\n            creator = new CommerceCreator(repo, new EventBusMock()),\n            handler = new CommerceCreatorHandler(creator),\n            expected = CommerceMother.random(),\n            command = CreateCommerceCommandMother.fromCommerce(expected);\n\n        repo.whenFindByIdThenReturn(null);\n        repo.whenFindByEmailThenReturn(null);\n\n        // eslint-disable-next-line one-var\n        const response = await handler.handle(command);\n\n        repo.assertFindByEmailIsCalledWith(expected.email);\n        repo.assertFindIdIsCalledWith(expected.id);\n        repo.assertSaveIsCalledWith(expected);\n\n        expect(response.data)\n            .toStrictEqual(expected);\n    });\n\n    it('should publish CommerceCreatedEvent', async () => {\n        const repo = new CommerceRepositoryMock(),\n            eventBus = new EventBusMock(),\n            creator = new CommerceCreator(repo, eventBus),\n            handler = new CommerceCreatorHandler(creator),\n            commerce = CommerceMother.random(),\n            command = CreateCommerceCommandMother.fromCommerce(commerce),\n            expected = CommerceCreatedEventMother.fromCommerce(commerce);\n\n        repo.whenFindByIdThenReturn(null);\n        repo.whenFindByEmailThenReturn(null);\n\n        await handler.handle(command);\n\n        eventBus.assertLastPublishedEventIs(expected);\n    });\n\n});\n"],"version":3}